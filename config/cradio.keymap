// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <30 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp F  &kp P      &kp B             &kp J      &kp L          &kp U      &kp Y    &kp SEMICOLON
&kp A  &kp R  &kp S  &kp T      &kp G             &kp M      &kp N          &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C  &kp D      &kp V             &kp K      &kp H          &kp COMMA  &kp DOT  &kp NON_US_BACKSLASH
                     &kp SPACE  &kp LEFT_SHIFT    &lt 1 TAB  &kp BACKSPACE
            >;
        };

        right_layer {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4   &kp N5     &kp N6   &kp N7    &kp N8    &kp N9     &kp N0
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5     &kp F6   &trans    &kp UP    &trans     &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11    &kp F12  &kp LEFT  &kp DOWN  &kp RIGHT  &bootloader
                        &trans   &tog 0     &tog 2   &trans
            >;
        };

        left_layer {
            bindings = <
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT          &kp CARET  &kp AMPS   &kp ASTRK  &kp GRAVE  &kp TILDE
&kp DQT   &kp LBKT  &kp LBRC  &kp LPAR  &default_report    &kp FSLH   &kp MINUS  &kp EQUAL  &kp COLON  &kp SEMI
&kp SQT   &kp RBKT  &kp RBRC  &kp RPAR  &bootloader        &kp BSLH   &kp UNDER  &kp PLUS   &kp PIPE   &kp QMARK
                              &trans    &tog 1             &tog 3     &tog 4
            >;
        };

        tri_layer {
            bindings = <
&trans  &trans  &trans  &trans  &bt BT_SEL 0    &bt BT_SEL 2  &out OUT_TOG   &trans  &kp C_MUTE    &kp C_PREV
&trans  &trans  &trans  &trans  &bt BT_SEL 1    &bt BT_SEL 3  &kp C_BRI_UP   &trans  &kp C_VOL_UP  &kp C_PP
&trans  &trans  &trans  &trans  &bt BT_CLR      &bt BT_SEL 4  &kp C_BRI_DEC  &trans  &kp C_VOL_DN  &kp C_NEXT
                        &tog 0  &tog 0          &tog 0        &tog 0
            >;
        };

        mouse {
            bindings = <
&tog 0  &mkp MB4  &mkp MCLK  &mkp MB5   &trans        &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &tog 0
&trans  &trans    &trans     &trans     &trans        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans     &trans     &trans        &trans          &mkp MB4        &mkp MCLK     &mkp MB5         &trans
                             &kp SPACE  &kp LSHIFT    &mkp LCLK       &mkp RCLK
            >;
        };
    };
};
